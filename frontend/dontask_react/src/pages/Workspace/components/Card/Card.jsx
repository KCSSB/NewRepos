// Card.jsx

import React, { useState, useCallback, useMemo } from "react";
import { useWorkspace } from "../../WorkspaceContext.jsx";
import add_icon from "./add_icon.png";
import "./Card.css";
import edit_icon from "./edit_icon.png";
import priority_icon from "./priorities.png";
import deadline_icon from "./deadline.png";
import { useWorkspaceEdit } from "../../WorkspaceEditContext.jsx";

// üîë –ö–û–ü–ò–†–û–í–ê–ù–ò–ï: –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–ª–æ–Ω–æ–∫/–¥–æ—Å–æ–∫ (–≤–∑—è—Ç–æ –∏–∑ Board_list.jsx)
const CARD_COLORS = [
  "#EE6868",
  "#EEDB68",
  "#8E8DFF",
  "#6868EE",
  "#68EE68",
  "#EE68BB",
];

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã
const formatDate = (dateString) => {
  if (!dateString) return null;
  const date = new Date(dateString);
  if (isNaN(date.getTime())) return null;

  const day = date.getDate().toString().padStart(2, "0");
  const month = (date.getMonth() + 1).toString().padStart(2, "0");
  return `${day}.${month}`;
};

// –†–∞—Å—á–µ—Ç –∫—Ä–∞–π–Ω–µ–≥–æ —Å—Ä–æ–∫–∞ –ø–æ –ø–æ–¥–∑–∞–¥–∞—á–∞–º

const calculateDeadline = (subTasks) => {
  if (!subTasks || subTasks.length === 0) {
    return null;
  }

  // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞—Ç—ã –¥–µ–¥–ª–∞–π–Ω–æ–≤.
  const deadlines = subTasks
    .map((subtask) => subtask.deadline)
    .filter((d) => d)
    .map((d) => new Date(d).getTime())
    .filter((t) => !isNaN(t));

  if (deadlines.length === 0) {
    return null;
  }

  // –ù–∞—Ö–æ–¥–∏–º —Å–∞–º—É—é –ø–æ–∑–¥–Ω—é—é –¥–∞—Ç—É (—Å–∞–º—ã–π –±–æ–ª—å—à–æ–π timestamp)
  const latestTimestamp = Math.max(...deadlines);
  return formatDate(latestTimestamp);
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–¥–Ω–æ–π –ü–û–î–ó–ê–î–ê–ß–ò (SubTask)

const SubTaskItem = ({ subtask, onToggle }) => {
  return (
    <div key={subtask.subTaskId} className="subtask-item">
      <input
        type="checkbox"
        checked={subtask.isCompleted}
        // –ò–ó–ú–ï–ù–ï–ù–ò–ï 2: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é onToggle
        onChange={() => onToggle(subtask.subTaskId, !subtask.isCompleted)}
        className="subtask-checkbox"
      />
      <span
        className={`subtask-name ${subtask.isCompleted ? "completed" : ""}`}
      >
        {subtask.subTaskName}
      </span>
    </div>
  );
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ó–ê–î–ê–ß–ò (Task)

const TaskItem = ({ card }) => {
  const { createSubTask, loading, toggleSubTaskCompletion } = useWorkspace();
  const { isEditMode, cardNameChanges, updateCardChanges } = useWorkspaceEdit();
  const [isSubmitting, setIsSubmitting] = useState(false);

  // üîë ID –∑–∞–¥–∞—á–∏
  const taskIdForApi = card.taskId;

  // –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ ID –≤—Ä–µ–º–µ–Ω–Ω—ã–º, –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è
  const isTemporaryId = String(taskIdForApi).startsWith("temp-");

  // –¢–µ–∫—É—â–µ–µ –∏–º—è –∑–∞–¥–∞—á–∏ (—Å —É—á–µ—Ç–æ–º –ª–æ–∫–∞–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π)
  const currentTaskName =
    cardNameChanges[taskIdForApi] !== undefined
      ? cardNameChanges[taskIdForApi]
      : card.cardName || "–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞";

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
  const handleNameChange = useCallback(
    (e) => {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è, –µ—Å–ª–∏ —ç—Ç–æ –Ω–æ–≤–∞—è (–Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è) –∑–∞–¥–∞—á–∞ —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º ID
      if (isTemporaryId) return;

      updateCardChanges(taskIdForApi, e.target.value);
    },
    [taskIdForApi, updateCardChanges, isTemporaryId]
  );

  const handleCreateSubTask = useCallback(
    async (subTaskId, newIsCompletedStatus) => {
      // –í—ã–∑–æ–≤ –±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —É–∂–µ –∏–¥–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∏–ª–∏ –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–∞–±–º–∏—Ç
      if (loading || isSubmitting) {
        console.warn(
          "–ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å –ø–æ–¥–∑–∞–¥–∞—á—É –≤–æ –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–ª–∏ —Å–∞–±–º–∏—Ç–∞."
        );
        return;
      }

      setIsSubmitting(true);
      try {
        // –í–Ω–∏–º–∞–Ω–∏–µ: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —á–∏—Å–ª–æ–≤–æ–π ID –¥–ª—è API —Ç–µ–ø–µ—Ä—å –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤–Ω—É—Ç—Ä–∏ WorkspaceContext.jsx
        await createSubTask(taskIdForApi);
      } catch (e) {
        // –û—à–∏–±–∫–∞ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —Å –ø–æ–º–æ—â—å—é Toast
      } finally {
        setIsSubmitting(false);
      }
    },
    [taskIdForApi, createSubTask, loading, isSubmitting]
  );

  // üîë –ù–û–í–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö: –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∑–∞–¥–∞—á–∏ (–í–°–¢–ê–í–ò–¢–¨ –°–Æ–î–ê)
  const handleSubTaskToggle = useCallback(
    async (subTaskId, newIsCompletedStatus) => {
      // –ë–ª–æ–∫–∏—Ä—É–µ–º, –µ—Å–ª–∏ –∏–¥–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞
      if (loading) {
        console.warn("–ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –ø–æ–¥–∑–∞–¥–∞—á—É –≤–æ –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏.");
        return;
      }

      try {
        // –ú—ã –ø–µ—Ä–µ–¥–∞–µ–º ID –∑–∞–¥–∞—á–∏, ID –ø–æ–¥–∑–∞–¥–∞—á–∏ –∏ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å.
        // –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–µ—Ä–µ–∑ API –∏ –∑–∞—Ç–µ–º –ª–æ–∫–∞–ª—å–Ω–æ.
        if (toggleSubTaskCompletion) {
          await toggleSubTaskCompletion(
            card.taskId,
            subTaskId,
            newIsCompletedStatus
          );
        } else {
          console.error(
            "–§—É–Ω–∫—Ü–∏—è toggleSubTaskCompletion –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ WorkspaceContext."
          );
        }
      } catch (e) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∑–∞–¥–∞—á–∏:", e);
        // –û—à–∏–±–∫–∞ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —Å –ø–æ–º–æ—â—å—é Toast
      }
    },
    [card.taskId, toggleSubTaskCompletion, loading]
  ); // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏

  const subtasksToRender = card.subTasks || [];

  // –†–∞—Å—á–µ—Ç –¥–µ–¥–ª–∞–π–Ω–∞ –∑–∞–¥–∞—á–∏ (—Å–∞–º–∞—è –ø–æ–∑–¥–Ω—è—è –¥–∞—Ç–∞ –ø–æ–¥–∑–∞–¥–∞—á–∏)
  const taskDeadline = calculateDeadline(subtasksToRender);

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
  const taskPriority = card.priority || "–í—ã—Å–æ–∫–∏–π";

  // –†–∞—Å—á–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
  const totalSubtasks = subtasksToRender.length;
  const completedSubtasks = subtasksToRender.filter(
    (s) => s.isCompleted
  ).length;
  const progressPercent =
    totalSubtasks > 0
      ? Math.round((completedSubtasks / totalSubtasks) * 100)
      : 0;

  return (
    <div key={card.cardId} className="list-card-item">
      <div className="task-header-row">
        {isEditMode ? (
          // üîë –†–ï–ñ–ò–ú –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–Ø: –ü–æ–ª–µ –≤–≤–æ–¥–∞
          <input
            type="text"
            className="list-task-input-edit"
            value={currentTaskName}
            onChange={handleNameChange}
          />
        ) : (
          // üîë –ù–û–†–ú–ê–õ–¨–ù–´–ô –†–ï–ñ–ò–ú: –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π —Ç–µ–∫—Å—Ç
          <div className="list-task-content">
            {card.cardName || "–≠–ª–µ–º–µ–Ω—Ç –≤–Ω—É—Ç—Ä–∏ –∫–æ–ª–æ–Ω–∫–∏"}
          </div>
        )}
        {taskDeadline && (
          <div className="task-info-compact-indicator">{taskDeadline}</div>
        )}
      </div>
      {/* 2. –ú–µ—Å—Ç–æ –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è */}
      <div className="task-description-placeholder">
        –ú–µ—Å—Ç–æ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ –æ–ø–∏—Å–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
      </div>
      {/* 3. –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ */}
      <div className="progress-bar-container">
        <div
          className="progress-bar-fill"
          style={{ width: `${progressPercent}%` }}
        ></div>
      </div>
      {/* 4. –°–ü–ò–°–û–ö –ü–û–î–ó–ê–î–ê–ß –ò –ö–ù–û–ü–ö–ê –°–û–ó–î–ê–ù–ò–Ø */}
      <div className="list-subtask">
        {/* –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∑–∞–¥–∞—á */}
        <div className="subtask-progress-status">
          {totalSubtasks > 0 ? (
            <span className="subtask-status-text">
              &#10003; {completedSubtasks} –∏–∑ {totalSubtasks}
            </span>
          ) : (
            <span className="subtask-status-text-empty">&#9711; 0 –∏–∑ 0</span>
          )}
        </div>

        {/* –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –ø–æ–¥–∑–∞–¥–∞—á */}
        {subtasksToRender.map((subtask) => (
          <SubTaskItem
            key={subtask.subTaskId}
            subtask={subtask}
            onToggle={handleSubTaskToggle}
          />
        ))}

        {/* –ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–∑–∞–¥–∞—á–∏ */}
        <button
          type="button"
          className="add-subtask-button"
          onClick={handleCreateSubTask}
          disabled={loading || isSubmitting}
        >
          {/* üîë –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞: —Ç–æ–ª—å–∫–æ –°–æ–∑–¥–∞–Ω–∏–µ... –∏–ª–∏ –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–∑–∞–¥–∞—á—É */}
          {isSubmitting ? "–°–æ–∑–¥–∞–Ω–∏–µ..." : "+ –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–∑–∞–¥–∞—á—É"}
        </button>
      </div>
      <div className="task-details-footer">
        {/* –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç */}
        <div
          className={`task-footer-item priority-footer priority-${taskPriority.toLowerCase()}`}
        >
          <img src={priority_icon} alt="–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç" className="indicator-icon" />
          <span className="priority-text">{taskPriority}</span>
        </div>

        {/* –î–µ–¥–ª–∞–π–Ω */}
        {taskDeadline && (
          <div className="task-footer-item deadline-footer">
            <img src={deadline_icon} alt="–î–µ–¥–ª–∞–π–Ω" className="indicator-icon" />
            <span className="deadline-text">{taskDeadline}</span>
          </div>
        )}

        {/* –£—á–∞—Å—Ç–Ω–∏–∫–∏ (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞) */}
        <div className="task-footer-item members-footer"></div>
      </div>
    </div>
  );
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–¥–Ω–æ–π "–ö–∞—Ä—Ç–æ—á–∫–∏" (–ö–æ–ª–æ–Ω–∫–∏/–°–ø–∏—Å–∫–∞)
const ListColumn = ({ list, index }) => {
  const { createTask, loading } = useWorkspace();
  const { isEditMode, cardNameChanges, updateCardChanges } = useWorkspaceEdit();
  const [isSubmitting, setIsSubmitting] = useState(false);
  const listColor = CARD_COLORS[index % CARD_COLORS.length];
  const listIdForApi = list.listId;
  const isListSaved = !String(listIdForApi).startsWith("temp-");

  // –¢–µ–∫—É—â–µ–µ –∏–º—è –∫–æ–ª–æ–Ω–∫–∏ (—Å —É—á–µ—Ç–æ–º –ª–æ–∫–∞–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π)
  const currentListName =
    cardNameChanges[listIdForApi] !== undefined
      ? cardNameChanges[listIdForApi]
      : list.listName || `ID: ${list.listId}`;

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–∫–∏
  const handleNameChange = useCallback(
    (e) => {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è, –µ—Å–ª–∏ —ç—Ç–æ –Ω–æ–≤–∞—è (–Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è) –∫–æ–ª–æ–Ω–∫–∞
      if (!isListSaved) return;

      updateCardChanges(listIdForApi, e.target.value);
    },
    [listIdForApi, updateCardChanges, isListSaved]
  );

  const handleCreateTask = async () => {
    if (loading || isSubmitting) return;
    setIsSubmitting(true);
    try {
      await createTask(list.listId);
    } catch (e) {
      // –û—à–∏–±–∫–∞ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —Å –ø–æ–º–æ—â—å—é Toast
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <div className="existing-list-container">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ */}
      <div className="list-header-wrapper">
        {isEditMode ? (
          // –†–ï–ñ–ò–ú –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–Ø: –ü–æ–ª–µ –≤–≤–æ–¥–∞
          <input
            type="text"
            className="list-title-input-edit"
            value={currentListName}
            onChange={handleNameChange}
          />
        ) : (
          // –ù–û–†–ú–ê–õ–¨–ù–´–ô –†–ï–ñ–ò–ú: –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
          <h3 className="list-title">
            {list.listName || `ID: ${list.listId}`}
          </h3>
        )}
        <div
          className="list-underline"
          style={{ backgroundColor: listColor }}
        ></div>
      </div>
      <div className="list-cards-wrapper">
        {/* –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–¥–∞—á */}
        {(list.cards || []).map((card) => (
          <TaskItem key={card.cardId} card={card} />
        ))}
        {}
        <button
          type="button"
          className="add-task-button"
          onClick={handleCreateTask}
          disabled={loading || isSubmitting}
        >
          {isSubmitting ? "–°–æ–∑–¥–∞–Ω–∏–µ..." : "+ –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É"}
        </button>
      </div>
    </div>
  );
};

// –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–æ—Å–∫–∏ (Card)

export default function Card() {
  const { createCard, loading, lists } = useWorkspace();
  const [isSubmitting, setIsSubmitting] = useState(false);

  const handleCreateCardColumn = async () => {
    if (loading || isSubmitting) return;

    setIsSubmitting(true);
    try {
      await createCard();
    } catch (e) {
      // –û—à–∏–±–∫–∞ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —Å –ø–æ–º–æ—â—å—é Toast
    } finally {
      setIsSubmitting(false);
    }
  };

  const listsToRender = lists || [];

  return (
    <div className="card-container">
      {listsToRender.map((list, index) => (
        <ListColumn key={list.listId} list={list} index={index} />
      ))}
      <button
        type="button"
        className="list-create-container list-create-button-style"
        onClick={handleCreateCardColumn}
        disabled={loading || isSubmitting}
      >
        <>
          <img
            src={add_icon}
            alt="–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É (–∫–æ–ª–æ–Ω–∫—É)"
            className="card-create-icon"
          />
          <p className="card-create-text">–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É</p>
        </>
      </button>
    </div>
  );
}
