// WorkspaceEditContext.jsx

import React, { createContext, useContext, useState, useCallback } from "react";
import { useToast } from "../../components/Toast/ToastContext";
// üîë –ò–ú–ü–û–†–¢: –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º API –∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
import { useWorkspace } from "./WorkspaceContext.jsx";

const WorkspaceEditContext = createContext(null);

export const WorkspaceEditProvider = ({ children }) => {
  const showToast = useToast();
  // üîë –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ò–∑–≤–ª–µ–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ API –∏ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ WorkspaceContext
  const { updateCardNames, fetchWorkspaceData } = useWorkspace();

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ, –æ–ø—Ä–µ–¥–µ–ª—è—é—â–µ–µ, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –¥–æ—Å–∫–∞ –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  const [isEditMode, setIsEditMode] = useState(false);
  // üîë –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–∞–∑–≤–∞–Ω–∏–π: { id: 'new name' }
  const [cardNameChanges, setCardNameChanges] = useState({});

  /**
   * –•—Ä–∞–Ω–∏—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è, –≤–Ω–µ—Å–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –≤ –ø–æ–ª—è—Ö –≤–≤–æ–¥–∞, –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏.
   * @param {string} id ID –∑–∞–¥–∞—á–∏ (cardId) –∏–ª–∏ –∫–æ–ª–æ–Ω–∫–∏ (listId).
   * @param {string} newName –ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.
   */
  const updateCardChanges = useCallback((id, newName) => {
    setCardNameChanges((prevChanges) => ({
      ...prevChanges,
      [id]: newName,
    }));
  }, []);

  /**
   * üöÄ –§–£–ù–ö–¶–ò–Ø: –ü—Ä–∏–º–µ–Ω—è–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç PATCH-–∑–∞–ø—Ä–æ—Å –∏ –≤—ã—Ö–æ–¥–∏—Ç –∏–∑ —Ä–µ–∂–∏–º–∞.
   */
  const applyChanges = useCallback(async () => {
    console.log("–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π...");

    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ {id, name}
    const changesArray = Object.entries(cardNameChanges)
      .map(([id, name]) => ({ id, name }))
      .filter(
        (item) => String(item.id).length > 0 && item.name.trim().length > 0
      ); // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø—É—Å—Ç—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è

    if (changesArray.length > 0) {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ–¥–Ω–∏–º PATCH-–∑–∞–ø—Ä–æ—Å–æ–º
      const success = await updateCardNames(changesArray);

      if (success) {
        showToast(
          `–£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ ${changesArray.length} –∏–∑–º–µ–Ω–µ–Ω–∏–π!`,
          "success"
        );
        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è (–æ—Å–æ–±–µ–Ω–Ω–æ –¥–ª—è unsaved changes)
        fetchWorkspaceData();
      } else {
        showToast("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è.", "error");
        return; // –û—Å—Ç–∞–µ–º—Å—è –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏ –æ—à–∏–±–∫–µ
      }
    } else {
      showToast("–ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.", "info");
    }

    setCardNameChanges({}); // –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    setIsEditMode(false); // –í—ã—Ö–æ–¥ –∏–∑ —Ä–µ–∂–∏–º–∞
  }, [cardNameChanges, updateCardNames, fetchWorkspaceData, showToast]);

  /**
   * –§–£–ù–ö–¶–ò–Ø: –û—Ç–º–µ–Ω—è–µ—Ç –≤—Å–µ –ª–æ–∫–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ –≤—ã—Ö–æ–¥–∏—Ç –∏–∑ —Ä–µ–∂–∏–º–∞.
   */
  const resetChanges = useCallback(() => {
    console.log("–û—Ç–º–µ–Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π. –û—Ç–∫–∞—Ç –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è...");

    setCardNameChanges({}); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    fetchWorkspaceData(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞
    showToast("–ò–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã.", "info");

    setIsEditMode(false); // –í—ã—Ö–æ–¥ –∏–∑ —Ä–µ–∂–∏–º–∞
  }, [fetchWorkspaceData, showToast]);

  /**
   * –ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
   */
  const toggleEditMode = useCallback(() => {
    setIsEditMode((prev) => !prev);
    // üîë –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û: –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—Ö–æ–¥–∏—Ç –∏–∑ —Ä–µ–∂–∏–º–∞,
    // –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    if (isEditMode) {
      resetChanges();
    }
  }, [isEditMode, resetChanges]);

  const value = {
    isEditMode,
    toggleEditMode,
    applyChanges,
    resetChanges,
    cardNameChanges, // üîë –î–û–ë–ê–í–õ–ï–ù–û: –¢–µ–∫—É—â–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    updateCardChanges, // üîë –î–û–ë–ê–í–õ–ï–ù–û: –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π
  };

  return (
    <WorkspaceEditContext.Provider value={value}>
      {children}
    </WorkspaceEditContext.Provider>
  );
};

// –•—É–∫ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
export const useWorkspaceEdit = () => {
  const context = useContext(WorkspaceEditContext);
  if (context === undefined) {
    throw new Error(
      "useWorkspaceEdit –¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤–Ω—É—Ç—Ä–∏ WorkspaceEditProvider"
    );
  }
  return context;
};
