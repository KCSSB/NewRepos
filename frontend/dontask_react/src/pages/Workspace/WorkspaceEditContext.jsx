import React, { createContext, useContext, useState, useCallback } from "react";
import { useToast } from "../../components/Toast/ToastContext";
import { useWorkspace } from "./WorkspaceContext.jsx";

const WorkspaceEditContext = createContext(null);

export const WorkspaceEditProvider = ({ children }) => {
  const showToast = useToast();
  const { updateCardNames, fetchWorkspaceData } = useWorkspace();

  const [isEditMode, setIsEditMode] = useState(false);
  
  // üîë –†–ê–ó–î–ï–õ–ï–ù–ò–ï: –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∫–æ–ª–æ–Ω–æ–∫ –∏ –∑–∞–¥–∞—á
  const [listNameChanges, setListNameChanges] = useState({});
  const [taskNameChanges, setTaskNameChanges] = useState({});

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ (—Å–ø–∏—Å–∫–∞)
   */
  const updateListChanges = useCallback((listId, newName) => {
    setListNameChanges((prevChanges) => ({
      ...prevChanges,
      [listId]: newName,
    }));
  }, []);

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ (–∫–∞—Ä—Ç–æ—á–∫–∏)
   */
  const updateTaskChanges = useCallback((taskId, newName) => {
    setTaskNameChanges((prevChanges) => ({
      ...prevChanges,
      [taskId]: newName,
    }));
  }, []);

  /**
   * üöÄ –§–£–ù–ö–¶–ò–Ø: –ü—Ä–∏–º–µ–Ω—è–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç PATCH-–∑–∞–ø—Ä–æ—Å –∏ –≤—ã—Ö–æ–¥–∏—Ç –∏–∑ —Ä–µ–∂–∏–º–∞.
   */
  const applyChanges = useCallback(async () => {
    console.log("–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π...");

    // üîë –†–ê–ó–î–ï–õ–ï–ù–ò–ï: –æ–±—ä–µ–¥–∏–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–∑ –æ–±–æ–∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
    const listChangesArray = Object.entries(listNameChanges)
      .map(([id, name]) => ({ id, name }))
      .filter((item) => String(item.id).length > 0 && item.name.trim().length > 0);

    const taskChangesArray = Object.entries(taskNameChanges)
      .map(([id, name]) => ({ id, name }))
      .filter((item) => String(item.id).length > 0 && item.name.trim().length > 0);

    const allChanges = [...listChangesArray, ...taskChangesArray];

    if (allChanges.length > 0) {
      const success = await updateCardNames(allChanges);

      if (success) {
        showToast(
          `–£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ ${allChanges.length} –∏–∑–º–µ–Ω–µ–Ω–∏–π!`,
          "success"
        );
        fetchWorkspaceData();
      } else {
        showToast("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è.", "error");
        return;
      }
    } else {
      showToast("–ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.", "info");
    }

    // üîë –û—á–∏—â–∞–µ–º –æ–±–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    setListNameChanges({});
    setTaskNameChanges({});
    setIsEditMode(false);
  }, [listNameChanges, taskNameChanges, updateCardNames, fetchWorkspaceData, showToast]);

  /**
   * –§–£–ù–ö–¶–ò–Ø: –û—Ç–º–µ–Ω—è–µ—Ç –≤—Å–µ –ª–æ–∫–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ –≤—ã—Ö–æ–¥–∏—Ç –∏–∑ —Ä–µ–∂–∏–º–∞.
   */
  const resetChanges = useCallback(() => {
    console.log("–û—Ç–º–µ–Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π. –û—Ç–∫–∞—Ç –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è...");

    setListNameChanges({});
    setTaskNameChanges({});
    fetchWorkspaceData();
    showToast("–ò–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã.", "info");

    setIsEditMode(false);
  }, [fetchWorkspaceData, showToast]);

  /**
   * –ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
   */
  const toggleEditMode = useCallback(() => {
    setIsEditMode((prev) => !prev);
    if (isEditMode) {
      resetChanges();
    }
  }, [isEditMode, resetChanges]);

  const value = {
    isEditMode,
    toggleEditMode,
    applyChanges,
    resetChanges,
    // üîë –†–ê–ó–î–ï–õ–ï–ù–ò–ï: –ø–µ—Ä–µ–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ —Ñ—É–Ω–∫—Ü–∏–∏
    listNameChanges,
    taskNameChanges,
    updateListChanges,
    updateTaskChanges,
  };

  return (
    <WorkspaceEditContext.Provider value={value}>
      {children}
    </WorkspaceEditContext.Provider>
  );
};

export const useWorkspaceEdit = () => {
  const context = useContext(WorkspaceEditContext);
  if (context === undefined) {
    throw new Error(
      "useWorkspaceEdit –¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤–Ω—É—Ç—Ä–∏ WorkspaceEditProvider"
    );
  }
  return context;
};