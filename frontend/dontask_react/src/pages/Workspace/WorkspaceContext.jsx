// WorkspaceContext.jsx

import React, {
  createContext,
  useContext,
  useState,
  useEffect,
  useCallback,
} from "react";
import { useParams, useLocation } from "react-router-dom";
import { useToast } from "../../components/Toast/ToastContext";
// üîë –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º fetchWithAuth (–¥–ª—è GET), postWithAuth (–¥–ª—è POST) –∏ patchWithAuth (–¥–ª—è PATCH)
import {
  fetchWithAuth,
  postWithAuth,
  patchWithAuth,
  deleteWithAuth,
} from "../../service/api.js";

// ‚ùå –£–î–ê–õ–ï–ù –ò–ú–ü–û–†–¢ useWorkspaceEdit, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–π –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
// import { useWorkspaceEdit } from "./WorkspaceEditContext.jsx";

// --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö ID ---
const generateUniqueId = (prefix = "temp") =>
  `${prefix}-${Date.now()}-${Math.random().toString(36).substring(2, 9)}`;

const WorkspaceContext = createContext(null);

export const useWorkspace = () => {
  const context = useContext(WorkspaceContext);
  if (context === undefined) {
    throw new Error(
      "useWorkspace –¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤–Ω—É—Ç—Ä–∏ WorkspaceProvider"
    );
  }
  return context;
};

// üîë –ù–û–†–ú–ê–õ–ò–ó–ê–¶–ò–Ø –î–ê–ù–ù–´–•
const normalizeWorkspaceData = (data) => {
  if (!data) return data;

  const rawLists = data.boardLists || data.cards;

  if (!rawLists || !Array.isArray(rawLists)) {
    console.warn(
      "–î–∞–Ω–Ω—ã–µ WorkSpace –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç –æ–∂–∏–¥–∞–µ–º–æ–≥–æ –º–∞—Å—Å–∏–≤–∞ –∫–æ–ª–æ–Ω–æ–∫ (boardLists –∏–ª–∏ cards)."
    );
    return { ...data, boardLists: [] };
  }

  const normalizedLists = rawLists.map((list) => {
    const listId = String(
      list.CardId || list.cardId || list.listId || generateUniqueId("list")
    );

    const normalizedCards = (list.tasks || list.cards || []).map((card) => {
      // –ù–û–†–ú–ê–õ–ò–ó–ê–¶–ò–Ø –ü–û–î–ó–ê–î–ê–ß
      const normalizedSubTasks = (card.subTasks || []).map((subtask) => ({
        ...subtask,
        // üîë –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç subTaskId (–º–∞–ª–µ–Ω—å–∫–æ–π) –∏–ª–∏ SubTaskId (–±–æ–ª—å—à–æ–π)
        subTaskId: String(
          subtask.subTaskId || subtask.SubTaskId || generateUniqueId("subtask")
        ),
        subTaskName:
          subtask.CardName ||
          subtask.cardName ||
          subtask.subTaskName ||
          "–ù–æ–≤–∞—è –ø–æ–¥–∑–∞–¥–∞—á–∞",
        isCompleted: subtask.isCompleted || false,
      }));

      const idFromServer = card.cardId || card.CardId; // üîë –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç cardId
      const finalCardId = idFromServer
        ? String(idFromServer)
        : generateUniqueId("temp");

      return {
        ...card,
        cardId: finalCardId,
        subTasks: normalizedSubTasks,
      };
    });

    return {
      ...list,
      listId: listId,
      listName: list.CardName || list.cardName || list.listName,
      cards: normalizedCards,
    };
  });

  return {
    ...data,
    boardLists: normalizedLists,
  };
};

export const WorkspaceProvider = ({ children }) => {
  const { boardId } = useParams();
  const location = useLocation();
  const incomingProjectId = location.state?.projectId;
  const incomingProjectName = location.state?.projectName;
  const showToast = useToast();

  const [workspaceData, setWorkspaceData] = useState(null);
  const [loading, setLoading] = useState(true);

  const projectIdFromApi = workspaceData?.projectId;
  const projectId = projectIdFromApi || incomingProjectId;
  const projectNameFromApi = workspaceData?.projectName;
  const projectName =
    projectNameFromApi || incomingProjectName || "–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞...";
  const boardName = workspaceData?.boardName || "–ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ—Å–∫–∏...";
  const members = workspaceData?.members || [];
  const lists = workspaceData?.boardLists || [];

  // --- –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—á–µ–π –æ–±–ª–∞—Å—Ç–∏ (–¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ö–û–õ–û–ù–ö–ò, –ó–ê–î–ê–ß–ò –∏ –ü–û–î–ó–ê–î–ê–ß–ò) ---
  const updateWorkspaceData = useCallback((newData) => {
    setWorkspaceData((prevData) => {
      if (!prevData) return prevData;

      let newBoardLists = [...(prevData.boardLists || [])];

      // 1. –õ–û–ì–ò–ö–ê –î–û–ë–ê–í–õ–ï–ù–ò–Ø –ù–û–í–û–ô –ö–û–õ–û–ù–ö–ò (–ö–ê–†–¢–û–ß–ö–ò)
      if (newData.newCard) {
        const listIdFromServer =
          newData.newCard.CardId || newData.newCard.cardId;

        const normalizedNewList = {
          listId: String(listIdFromServer || generateUniqueId("list")),
          listName:
            newData.newCard.CardName ||
            newData.newCard.cardName ||
            "–ù–æ–≤–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞",
          ...newData.newCard,
          cards: newData.newCard.cards || newData.newCard.tasks || [],
        };

        if (!normalizedNewList.listId) {
          console.error(
            "–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –¥–ª—è –Ω–æ–≤–æ–π –∫–æ–ª–æ–Ω–∫–∏. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ."
          );
          return prevData;
        }

        const finalLists = [...newBoardLists, normalizedNewList];

        console.log(
          "‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è –ö–æ–ª–æ–Ω–∫–∞/–°–ø–∏—Å–æ–∫ ('–ö–∞—Ä—Ç–æ—á–∫–∞'):",
          normalizedNewList
        );

        return {
          ...prevData,
          boardLists: finalLists,
        };
      } // 2. –õ–û–ì–ò–ö–ê –î–û–ë–ê–í–õ–ï–ù–ò–Ø –ù–û–í–û–ô –ó–ê–î–ê–ß–ò (–¢–ê–°–ö–ê)

      if (newData.newTask && newData.listId) {
        const { newTask, listId } = newData;

        const targetListIndex = newBoardLists.findIndex(
          (l) => l.listId === listId
        );

        if (targetListIndex === -1) {
          console.error(
            `–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–ø–∏—Å–æ–∫ —Å ID: ${listId} –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏.`
          );
          return prevData;
        }

        // üîë –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç cardId (–º–∞–ª–µ–Ω—å–∫–∞—è –±—É–∫–≤–∞), –∫–∞–∫ –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ –≤ createTask
        const taskIdFromServer =
          newData.newTask.cardId || newData.newTask.CardId;

        // ‚ö†Ô∏è –ì–ê–†–ê–ù–¢–ò–Ø –ß–ò–°–õ–û–í–û–ì–û ID: –ï—Å–ª–∏ ID –Ω–µ —á–∏—Å–ª–æ–≤–æ–π (—Ç.–µ. temp-...), –æ—Ç–º–µ–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI.
        if (!taskIdFromServer || isNaN(parseInt(taskIdFromServer))) {
          console.error(
            "–û—à–∏–±–∫–∞: –°–µ—Ä–≤–µ—Ä –Ω–µ –≤–µ—Ä–Ω—É–ª –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–∏—Å–ª–æ–≤–æ–π ID –¥–ª—è –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏. –¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±—ç–∫–µ–Ω–¥–∞."
          );
          return prevData;
        }

        const normalizedNewTask = {
          cardId: String(taskIdFromServer), // ‚¨ÖÔ∏è –¢–æ–ª—å–∫–æ —á–∏—Å–ª–æ–≤–æ–π ID (–∫–∞–∫ —Å—Ç—Ä–æ–∫–∞)
          cardName:
            newData.newTask.CardName ||
            newData.newTask.cardName ||
            "–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞",
          ...newData.newTask,
          subTasks: newData.newTask.subTasks || [],
        };

        if (!normalizedNewTask.cardId) {
          console.error(
            "–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –¥–ª—è –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ."
          );
          return prevData;
        }

        const targetList = newBoardLists[targetListIndex];

        const updatedList = {
          ...targetList,
          cards: [...(targetList.cards || []), normalizedNewTask],
        };

        const finalLists = [
          ...newBoardLists.slice(0, targetListIndex),
          updatedList,
          ...newBoardLists.slice(targetListIndex + 1),
        ];

        console.log(
          `‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –≤ —Å–ø–∏—Å–æ–∫ ${listId}:`,
          normalizedNewTask
        );

        return {
          ...prevData,
          boardLists: finalLists,
        };
      } // 3. üöÄ –õ–û–ì–ò–ö–ê –î–û–ë–ê–í–õ–ï–ù–ò–Ø –ù–û–í–û–ô –ü–û–î–ó–ê–î–ê–ß–ò (SUBTASK)

      if (newData.newSubTask && newData.taskId) {
        const { newSubTask, taskId } = newData;

        let targetListIndex = -1;
        let targetCardIndex = -1;
        // –ù–∞—Ö–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ (list) –∏ –∑–∞–¥–∞—á—É (card) –ø–æ taskId

        for (let i = 0; i < newBoardLists.length; i++) {
          targetCardIndex = newBoardLists[i].cards.findIndex(
            (c) => String(c.cardId) === String(taskId)
          );
          if (targetCardIndex !== -1) {
            targetListIndex = i;
            break;
          }
        }

        if (targetListIndex === -1) {
          console.error(
            `–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∑–∞–¥–∞—á—É —Å ID: ${taskId} –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–∑–∞–¥–∞—á–∏.`
          );
          return prevData;
        } // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç API SubTask

        // üîë –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç subTaskId (–º–∞–ª–µ–Ω—å–∫–æ–π), –∑–∞—Ç–µ–º SubTaskId (–±–æ–ª—å—à–æ–π)
        const subTaskIdFromServer =
          newSubTask.subTaskId || newSubTask.SubTaskId;

        const normalizedNewSubTask = {
          subTaskId: String(subTaskIdFromServer || generateUniqueId("subtask")),
          subTaskName:
            newSubTask.SubTaskName ||
            newSubTask.subTaskName ||
            "–ù–æ–≤–∞—è –ø–æ–¥–∑–∞–¥–∞—á–∞", // üîë –£—Ç–æ—á–Ω–µ–Ω–Ω–∞—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
          isCompleted: newSubTask.isCompleted || false,
          ...newSubTask,
        };

        if (!normalizedNewSubTask.subTaskId) {
          console.error(
            "–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –¥–ª—è –Ω–æ–≤–æ–π –ø–æ–¥–∑–∞–¥–∞—á–∏. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ."
          );
          return prevData;
        }

        const targetList = newBoardLists[targetListIndex];
        const targetCard = targetList.cards[targetCardIndex];

        const updatedSubTasks = [
          ...(targetCard.subTasks || []),
          normalizedNewSubTask,
        ];

        const updatedCard = {
          ...targetCard,
          subTasks: updatedSubTasks,
        };

        const updatedCards = [
          ...targetList.cards.slice(0, targetCardIndex),
          updatedCard,
          ...targetList.cards.slice(targetCardIndex + 1),
        ];

        const updatedList = {
          ...targetList,
          cards: updatedCards,
        };

        const finalLists = [
          ...newBoardLists.slice(0, targetListIndex),
          updatedList,
          ...newBoardLists.slice(targetListIndex + 1),
        ];

        console.log(
          `‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è –ø–æ–¥–∑–∞–¥–∞—á–∞ –≤ –∑–∞–¥–∞—á—É ${taskId}:`,
          normalizedNewSubTask
        );

        return {
          ...prevData,
          boardLists: finalLists,
        };
      }

      return { ...prevData, ...newData };
    });
  }, []);

  const toggleSubTaskCompletion = useCallback(
    async (taskId, subTaskId, newIsCompletedStatus) => {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ ID, —á—Ç–æ–±—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π ID –Ω–∞ —Å–µ—Ä–≤–µ—Ä
      if (String(taskId).startsWith("temp-")) {
        console.warn("–ü–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–¥–∑–∞–¥–∞—á—É —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º ID.");
        showToast("–ó–∞–¥–∞—á–∞ –µ—â–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞. –°–Ω–∞—á–∞–ª–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ.", "error");
        return false;
      }

      try {
        // 1. –í—ã–∑–æ–≤ API
        const url = `/api/projects/${projectId}/boards/${boardId}/tasks/${taskId}/subtasks/${subTaskId}`;
        await patchWithAuth(url, { isCompleted: newIsCompletedStatus });

        // 2. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è (–¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ –æ—Ç–∫–ª–∏–∫–∞)
        setWorkspaceData((prevData) => {
          const newBoardLists = prevData.boardLists.map((list) => {
            // –ò—â–µ–º –Ω—É–∂–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É (–∑–∞–¥–∞—á—É)
            const updatedCards = list.cards.map((card) => {
              if (card.taskId === taskId) {
                // –ò—â–µ–º –Ω—É–∂–Ω—É—é –ø–æ–¥–∑–∞–¥–∞—á—É –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –µ–µ
                const updatedSubTasks = card.subTasks.map((subtask) => {
                  if (subtask.subTaskId === subTaskId) {
                    return { ...subtask, isCompleted: newIsCompletedStatus };
                  }
                  return subtask;
                });
                return { ...card, subTasks: updatedSubTasks };
              }
              return card;
            });
            return { ...list, cards: updatedCards };
          });
          return { ...prevData, boardLists: newBoardLists };
        });

        showToast("–°—Ç–∞—Ç—É—Å –ø–æ–¥–∑–∞–¥–∞—á–∏ –æ–±–Ω–æ–≤–ª–µ–Ω!", "success");
        return true;
      } catch (err) {
        console.error(
          "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∑–∞–¥–∞—á–∏:",
          err.response || err.message
        );
        showToast("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∑–∞–¥–∞—á–∏.", "error");
        return false;
      }
    },
    [projectId, boardId, showToast]
  );

  // ----------------------------------------------------------------------
  // –§–£–ù–ö–¶–ò–ò –ó–ê–ì–†–£–ó–ö–ò –ò –ò–ó–í–õ–ï–ß–ï–ù–ò–Ø –î–ê–ù–ù–´–•
  // ----------------------------------------------------------------------

  const fetchWorkspaceData = useCallback(
    async (id) => {
      if (!id) return;
      setLoading(true);
      try {
        const data = await fetchWithAuth(`/GetPages/GetWorkSpacePage/${id}`);
        const normalizedData = normalizeWorkspaceData(data);

        setWorkspaceData(normalizedData);

        console.log(
          "–î–∞–Ω–Ω—ã–µ —Ä–∞–±–æ—á–µ–π –æ–±–ª–∞—Å—Ç–∏ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω—ã:",
          normalizedData
        );
      } catch (err) {
        console.error(
          "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö WorkSpace:",
          err.response || err.message
        );
        showToast(
          "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞–±–æ—á—É—é –æ–±–ª–∞—Å—Ç—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
          "error"
        );
      } finally {
        setLoading(false);
      }
    },
    [showToast]
  );

  useEffect(() => {
    fetchWorkspaceData(boardId);
  }, [boardId, fetchWorkspaceData]);

  // ----------------------------------------------------------------------
  // –§–£–ù–ö–¶–ò–ò API –î–õ–Ø –°–û–ó–î–ê–ù–ò–Ø
  // ----------------------------------------------------------------------

  const createCard = useCallback(async () => {
    if (!projectId || !boardId) {
      console.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç Project ID –∏–ª–∏ Board ID.");
      showToast(
        "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ (–∫–æ–ª–æ–Ω–∫–∏).",
        "error"
      );
      return;
    }

    const url = `/project/${projectId}/board/${boardId}/Card/CreateCard`;

    const payload = {
      CardName: "–ù–æ–≤–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞",
    };

    try {
      const newCard = await postWithAuth(url, payload, {
        headers: { "Content-Type": "application/json" },
      });

      showToast("–ù–æ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!", "success");

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º updateWorkspaceData –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –∫–æ–ª–æ–Ω–∫–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      updateWorkspaceData({ newCard: newCard });

      return newCard;
    } catch (err) {
      console.error(
        "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ (–∫–æ–ª–æ–Ω–∫–∏):",
        err.response || err.message
      );
      showToast(
        "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ (–∫–æ–ª–æ–Ω–∫–∏). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
        "error"
      );
      throw err;
    }
  }, [projectId, boardId, showToast, updateWorkspaceData]);

  const createTask = useCallback(
    async (listId, taskName = "–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞") => {
      // ‚ö†Ô∏è –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–†–û–í–ï–†–ö–ê –ó–ê–í–ò–°–ò–ú–û–°–¢–ï–ô
      if (!projectId || !boardId || !listId) {
        console.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç Project ID, Board ID –∏–ª–∏ List ID.", {
          projectId,
          boardId,
          listId,
        });
        showToast("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏.", "error");
        return;
      }

      // –ï—Å–ª–∏ –≤—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ taskName, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ URL –µ–≥–æ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç
      const baseUrl = `/project/${projectId}/board/${boardId}/Task/CreateTask?cardId=${listId}`;

      // –í –≤–∞—à–µ–º –∫–æ–¥–µ payload –±—ã–ª –ø—É—Å—Ç—ã–º. –ï—Å–ª–∏ –≤–∞–º –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å taskName, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:
      // const payload = { CardName: taskName };
      const payload = {}; // –ò—Å–ø–æ–ª—å–∑—É–µ–º, –∫–∞–∫ –≤ –≤–∞—à–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º –∫–æ–¥–µ

      try {
        // 1. API-–≤—ã–∑–æ–≤
        const newTask = await postWithAuth(baseUrl, payload, {
          headers: { "Content-Type": "application/json" },
        });

        console.log("–ø—Ä–æ–≤–µ—Ä–∫–∞ ", newTask);

        // üîë –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç cardId (–º–∞–ª–µ–Ω—å–∫–∞—è –±—É–∫–≤–∞)
        const taskIdFromServer = newTask?.taskId;

        if (!taskIdFromServer || isNaN(parseInt(taskIdFromServer))) {
          throw new Error(
            "–°–µ—Ä–≤–µ—Ä –Ω–µ –≤–µ—Ä–Ω—É–ª –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–∏—Å–ª–æ–≤–æ–π ID –¥–ª—è –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏."
          );
        }

        const numericIdString = String(taskIdFromServer); // üîë –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Å—Ç—Ä–æ–∫–æ–≤–æ–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ

        showToast("–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!", "success");

        // 3. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è: –ø–µ—Ä–µ–¥–∞–µ–º –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞
        // –í–ê–ñ–ù–û: –ú—ã –∑–∞–º–µ–Ω—è–µ–º CardId/cardId –≤ –æ—Ç–≤–µ—Ç–µ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π String ID
        updateWorkspaceData({
          newTask: { ...newTask, cardId: numericIdString }, // üîë –ò—Å–ø–æ–ª—å–∑—É–µ–º cardId, –∫–∞–∫ –æ–∂–∏–¥–∞–µ—Ç—Å—è –≤ UI
          listId: listId,
        });

        return { ...newTask, cardId: numericIdString };
      } catch (err) {
        console.error(
          "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏:",
          err.response || err.message
        );
        showToast(
          "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å.",
          "error"
        );
        throw err;
      }
    },
    // ‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ updateWorkspaceData –≤ –º–∞—Å—Å–∏–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    [projectId, boardId, showToast, updateWorkspaceData]
  );

  const createSubTask = useCallback(
    async (taskId, subTaskName = "–ù–æ–≤–∞—è –ø–æ–¥–∑–∞–¥–∞—á–∞") => {
      // üîë –õ–û–ì 2: –ò—Å—Ö–æ–¥–Ω—ã–π ID, –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π –∏–∑ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ (–±—É–¥–µ—Ç "temp-..." –∏–ª–∏ —á–∏—Å–ª–æ)
      console.log(
        `üöÄ [SubTask] –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å –ø–æ–¥–∑–∞–¥–∞—á—É. Task ID (–∏—Å—Ö–æ–¥–Ω—ã–π): ${taskId}`
      );

      if (!projectId || !boardId || !taskId) {
        console.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç Project ID, Board ID –∏–ª–∏ Task ID.");
        showToast("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–∑–∞–¥–∞—á–∏.", "error");
        return;
      }

      const numericTaskId = parseInt(taskId);

      // üîë –õ–û–ì 3: –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞
      console.log(`üöÄ [SubTask] Task ID –ø–æ—Å–ª–µ parseInt: ${numericTaskId}`); // üîë –ó–¥–µ—Å—å –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞, –µ—Å–ª–∏ taskId == "temp-..."

      if (isNaN(numericTaskId) || numericTaskId <= 0) {
        console.error(
          `‚ùå [SubTask] –ë–õ–û–ö–ò–†–û–í–ö–ê: Task ID –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–≤—ã–º: ${taskId}. –û—Ç–º–µ–Ω–∞ API-–≤—ã–∑–æ–≤–∞.`
        );
        showToast(
          "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ–¥–∑–∞–¥–∞—á—É: –°–Ω–∞—á–∞–ª–∞ –¥–æ–∂–¥–∏—Ç–µ—Å—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.",
          "error"
        );
        return;
      }

      // üîë –õ–û–ì 4: –£—Å–ø–µ—à–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
      console.log(
        `‚úÖ [SubTask] Task ID –ø—Ä–æ—à–µ–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é: ${numericTaskId}. –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è API-–≤—ã–∑–æ–≤.`
      );

      const url = `/project/${projectId}/board/${boardId}/Task/CreateSubTask?taskId=${numericTaskId}`;

      const payload = {
        SubTaskName: subTaskName,
      };

      try {
        const newSubTask = await postWithAuth(url, payload, {
          headers: { "Content-Type": "application/json" },
        });

        showToast("–ù–æ–≤–∞—è –ø–æ–¥–∑–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!", "success");

        updateWorkspaceData({ newSubTask: newSubTask, taskId: taskId });

        return newSubTask;
      } catch (err) {
        // ... (–ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫) ...
        throw err;
      }
    },
    [projectId, boardId, showToast, updateWorkspaceData]
  );

  // ----------------------------------------------------------------------
  // üîë –§–£–ù–ö–¶–ò–Ø API: PATCH –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π –∑–∞–¥–∞—á/–∫–æ–ª–æ–Ω–æ–∫
  // ----------------------------------------------------------------------

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç PATCH –∑–∞–ø—Ä–æ—Å –¥–ª—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∫–∞—Ä—Ç–æ—á–µ–∫/–∫–æ–ª–æ–Ω–æ–∫.
   * @param {Array<{id: string, name: string}>} cardsToUpdate –ú–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ —Å ID –∏ –Ω–æ–≤—ã–º –∏–º–µ–Ω–µ–º.
   * @returns {Promise<boolean>} –£—Å–ø–µ—à–Ω–æ –ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ.
   */
  const updateCardNames = useCallback(
    async (cardsToUpdate) => {
      if (!projectId || !boardId || cardsToUpdate.length === 0) {
        console.error(
          "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç Project ID, Board ID –∏–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è."
        );
        return false;
      }

      const url = `/project/${projectId}/board/${boardId}/Card/ChangeCardsNames`;

      // 1. –§–æ—Ä–º–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ –∫–∞—Ä—Ç–æ—á–µ–∫ —Å –∫–ª—é—á–∞–º–∏ —Å –º–∞–ª–µ–Ω—å–∫–æ–π –±—É–∫–≤—ã (cardId, cardName)
      const cardArray = cardsToUpdate.map((item) => ({
        cardId: parseInt(item.id),
        cardName: item.name,
      }));

      // –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤—ã–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ ID
      const validCardArray = cardArray.filter(
        (item) => !isNaN(item.cardId) && item.cardId > 0
      );

      if (validCardArray.length === 0) {
        console.log("–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ PATCH-–∑–∞–ø—Ä–æ—Å–∞.");
        return true;
      }

      // 2. –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º –º–∞—Å—Å–∏–≤ –≤ –æ–±—ä–µ–∫—Ç —Å –∫–ª—é—á–æ–º "cards"
      const finalPayload = {
        cards: validCardArray,
      };

      try {
        await patchWithAuth(url, finalPayload);

        // üîë –ù–û–í–´–ô –ö–û–î –î–õ–Ø –û–ë–ù–û–í–õ–ï–ù–ò–Ø –õ–û–ö–ê–õ–¨–ù–û–ì–û –°–û–°–¢–û–Ø–ù–ò–Ø:
        setWorkspaceData((prevData) => {
          if (!prevData || !prevData.boardLists) return prevData;

          // –°–æ–∑–¥–∞–µ–º Map –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –ø–æ ID
          const updatesMap = new Map(
            cardsToUpdate.map((card) => [String(card.id), card.name])
          );

          const newBoardLists = prevData.boardLists.map((list) => {
            const listId = String(list.listId);
            let isListUpdated = false;
            let updatedCards = list.cards;

            // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–∞–º–æ–π –∫–æ–ª–æ–Ω–∫–∏ (listName)
            if (updatesMap.has(listId)) {
              isListUpdated = true;
              // –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é —Å–ø–∏—Å–∫–∞ —Å –Ω–æ–≤—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º
              list = { ...list, listName: updatesMap.get(listId) };
            }

            // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è –∑–∞–¥–∞—á –≤–Ω—É—Ç—Ä–∏ –∫–æ–ª–æ–Ω–∫–∏ (cardName)
            updatedCards = list.cards.map((card) => {
              const cardId = String(card.cardId);
              if (updatesMap.has(cardId)) {
                isListUpdated = true;
                return { ...card, cardName: updatesMap.get(cardId) };
              }
              return card;
            });

            if (isListUpdated) {
              return { ...list, cards: updatedCards };
            }
            return list;
          });

          return { ...prevData, boardLists: newBoardLists };
        });
        // --------------------------------------------------------

        showToast("–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏(–æ–∫) —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ!", "success"); // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ—Å—Ç –æ–± —É—Å–ø–µ—à–Ω–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
        return true;
      } catch (err) {
        console.error(
          "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏–π (PATCH):",
          err.response || err.message
        );
        showToast("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π.", "error"); // –¢–æ—Å—Ç –æ–± –æ—à–∏–±–∫–µ
        return false;
      }
    },
    [projectId, boardId, showToast]
  );

  // üîë –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∑–∞–¥–∞—á–∏ —á–µ—Ä–µ–∑ PATCH-–∑–∞–ø—Ä–æ—Å
  const updateSubTaskStatus = useCallback(
    async (taskId, subTaskId, newIsCompleted) => {
      // ‚ö†Ô∏è –ò–°–ü–û–õ–¨–ó–£–ï–ú –ü–£–¢–¨ –ò–ó –°–ö–†–ò–ù–®–û–¢–ê
      const apiUrl = `/api/projects/${projectId}/tasks/${taskId}/subtasks/${subTaskId}`;
      const payload = {
        isCompleted: newIsCompleted, // –ò–º—è –ø–æ–ª—è, –∫–∞–∫ –Ω–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–µ
      };

      try {
        // üöÄ –û—Ç–ø—Ä–∞–≤–∫–∞ PATCH-–∑–∞–ø—Ä–æ—Å–∞
        await patchWithAuth(apiUrl, payload);

        // --- –õ–û–ö–ê–õ–¨–ù–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï –°–û–°–¢–û–Ø–ù–ò–Ø ---
        setWorkspaceData((prevData) => {
          if (!prevData) return prevData;

          // –ò—Ç–µ—Ä–∏—Ä—É–µ–º—Å—è –ø–æ –∫–æ–ª–æ–Ω–∫–∞–º (boardLists)
          const newBoardLists = prevData.boardLists.map((list) => {
            let isListUpdated = false;
            // –ò—Ç–µ—Ä–∏—Ä—É–µ–º—Å—è –ø–æ –∑–∞–¥–∞—á–∞–º (cards)
            const updatedCards = list.cards.map((card) => {
              // –ò—â–µ–º –Ω—É–∂–Ω—É—é –∑–∞–¥–∞—á—É (task) –ø–æ taskId (–∫–æ—Ç–æ—Ä—ã–π —Ä–∞–≤–µ–Ω cardId)
              if (String(card.cardId) === String(taskId)) {
                // –ò—Ç–µ—Ä–∏—Ä—É–µ–º—Å—è –ø–æ –ø–æ–¥–∑–∞–¥–∞—á–∞–º (subTasks)
                const updatedSubTasks = card.subTasks.map((subtask) => {
                  // –ò—â–µ–º –Ω—É–∂–Ω—É—é –ø–æ–¥–∑–∞–¥–∞—á—É
                  if (String(subtask.subTaskId) === String(subTaskId)) {
                    isListUpdated = true;
                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                    return { ...subtask, isCompleted: newIsCompleted };
                  }
                  return subtask;
                });

                if (isListUpdated) {
                  // –û–±–Ω–æ–≤–ª—è–µ–º –º–∞—Å—Å–∏–≤ –ø–æ–¥–∑–∞–¥–∞—á –≤ –∑–∞–¥–∞—á–µ
                  return { ...card, subTasks: updatedSubTasks };
                }
              }
              return card;
            });

            if (isListUpdated) {
              // –û–±–Ω–æ–≤–ª—è–µ–º –º–∞—Å—Å–∏–≤ –∑–∞–¥–∞—á –≤ —Å–ø–∏—Å–∫–µ
              return { ...list, cards: updatedCards };
            }
            return list;
          });

          // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
          return { ...prevData, boardLists: newBoardLists };
        });
        // ------------------------------------

        showToast("–°—Ç–∞—Ç—É—Å –ø–æ–¥–∑–∞–¥–∞—á–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!", "success");
        return true;
      } catch (err) {
        console.error(
          "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∑–∞–¥–∞—á–∏ (PATCH):",
          err.response || err.message
        );
        showToast("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∑–∞–¥–∞—á–∏.", "error");
        return false;
      }
    },
    [projectId, showToast, patchWithAuth]
  );

  // ----------------------------------------------------------------------
  // üîë –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ (–ö–∞—Ä—Ç–æ—á–∫–∏)
  // ----------------------------------------------------------------------
  const deleteCardColumn = useCallback(
    async (listId) => {
      if (!listId) {
        showToast("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ID –∫–æ–ª–æ–Ω–∫–∏.", "error");
        return false;
      }

      try {
        // 1. –û—Ç–ø—Ä–∞–≤–∫–∞ DELETE-–∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        const url = `/api/projects/${projectId}/list/${listId}`;
        await deleteWithAuth(url); // –ò—Å–ø–æ–ª—å–∑—É–µ–º deleteWithAuth

        // 2. –û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI: –£–¥–∞–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        setWorkspaceData((prevData) => {
          const newBoardLists = prevData.boardLists.filter(
            (list) => list.listId !== listId
          );
          return { ...prevData, boardLists: newBoardLists };
        });

        showToast("–ö–æ–ª–æ–Ω–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞! üéâ", "success");
        return true;
      } catch (err) {
        console.error(
          "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ–ª–æ–Ω–∫–∏ (DELETE):",
          err.response || err.message
        );
        const errorMessage =
          err.response?.data?.message ||
          err.message ||
          "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞.";
        showToast(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ–ª–æ–Ω–∫–∏: ${errorMessage}`, "error");

        // –ï—Å–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ, –Ω–æ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º–∞ —Å JSON,
        // –≤—Å–µ —Ä–∞–≤–Ω–æ –æ–±–Ω–æ–≤–∏–º UI. (–≠—Ç–æ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ API)
        if (err.response && err.response.status === 204) {
          showToast(
            "–ö–æ–ª–æ–Ω–∫–∞ —É–¥–∞–ª–µ–Ω–∞, –Ω–æ –æ—Ç–≤–µ—Ç –ø—É—Å—Ç (204 No Content). –û–±–Ω–æ–≤–ª—è–µ–º UI. üéâ",
            "success"
          );
          setWorkspaceData((prevData) => {
            const newBoardLists = prevData.boardLists.filter(
              (list) => list.listId !== listId
            );
            return { ...prevData, boardLists: newBoardLists };
          });
          return true;
        }

        return false;
      }
    },
    // üîë –û–ë–ù–û–í–õ–ï–ù–ò–ï: –í–∫–ª—é—á–∞–µ–º deleteWithAuth –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    [projectId, showToast, deleteWithAuth, setWorkspaceData]
  );

  // ----------------------------------------------------------------------
  // –ö–û–ù–¢–ï–ö–°–¢
  // ----------------------------------------------------------------------

  const contextValue = {
    workspaceData,
    loading,
    projectName,
    boardName,
    members,
    projectId,
    createCard,
    createTask,
    createSubTask,
    fetchWorkspaceData,
    lists,
    deleteCardColumn,
    updateCardNames, // –§—É–Ω–∫—Ü–∏—è API –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    updateSubTaskStatus,
  };

  return (
    <WorkspaceContext.Provider value={contextValue}>
      {children}
    </WorkspaceContext.Provider>
  );
};
