// WorkspaceContext.jsx

import React, {
  createContext,
  useContext,
  useState,
  useEffect,
  useCallback,
} from "react";
import { useParams, useLocation } from "react-router-dom";
import { useToast } from "../../components/Toast/ToastContext";
import {
  fetchWithAuth,
  postWithAuth,
  patchWithAuth,
} from "../../service/api.js";

// --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö ID ---
const generateUniqueId = (prefix = "temp") =>
  `${prefix}-${Date.now()}-${Math.random().toString(36).substring(2, 9)}`;

const WorkspaceContext = createContext(null);

export const useWorkspace = () => {
  const context = useContext(WorkspaceContext);
  if (context === undefined) {
    throw new Error(
      "useWorkspace –¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤–Ω—É—Ç—Ä–∏ WorkspaceProvider"
    );
  }
  return context;
};

// üîë –ù–û–†–ú–ê–õ–ò–ó–ê–¶–ò–Ø –î–ê–ù–ù–´–•
const normalizeWorkspaceData = (data) => {
  if (!data) return data;

  const rawLists = data.boardLists || data.cards;

  if (!rawLists || !Array.isArray(rawLists)) {
    console.warn(
      "–î–∞–Ω–Ω—ã–µ WorkSpace –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç –æ–∂–∏–¥–∞–µ–º–æ–≥–æ –º–∞—Å—Å–∏–≤–∞ –∫–æ–ª–æ–Ω–æ–∫ (boardLists –∏–ª–∏ cards)."
    );
    return { ...data, boardLists: [] };
  }

  const normalizedLists = rawLists.map((list) => {
    const listId = String(
      list.CardId || list.cardId || list.listId || generateUniqueId("list")
    );

    const normalizedCards = (list.tasks || list.cards || []).map((card) => {
      // –ù–û–†–ú–ê–õ–ò–ó–ê–¶–ò–Ø –ü–û–î–ó–ê–î–ê–ß
      const normalizedSubTasks = (card.subTasks || []).map((subtask) => ({
        ...subtask,
        subTaskId: String(
          subtask.subTaskId || subtask.SubTaskId || generateUniqueId("subtask")
        ),
        subTaskName:
          subtask.CardName ||
          subtask.cardName ||
          subtask.subTaskName ||
          "–ù–æ–≤–∞—è –ø–æ–¥–∑–∞–¥–∞—á–∞",
        isCompleted: subtask.isCompleted || false,
      }));

      const idFromServer = card.cardId || card.CardId;
      const finalCardId = idFromServer
        ? String(idFromServer)
        : generateUniqueId("temp");

      return {
        ...card,
        cardId: finalCardId,
        subTasks: normalizedSubTasks,
      };
    });

    return {
      ...list,
      listId: listId,
      listName: list.CardName || list.cardName || list.listName,
      cards: normalizedCards,
    };
  });

  return {
    ...data,
    boardLists: normalizedLists,
  };
};

export const WorkspaceProvider = ({ children }) => {
  const { boardId } = useParams();
  const location = useLocation();
  const incomingProjectId = location.state?.projectId;
  const incomingProjectName = location.state?.projectName;
  const showToast = useToast();

  const [workspaceData, setWorkspaceData] = useState(null);
  const [loading, setLoading] = useState(true);

  // --- –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—á–µ–π –æ–±–ª–∞—Å—Ç–∏ ---
  const updateWorkspaceData = useCallback((newData) => {
    setWorkspaceData((prevData) => {
      if (!prevData) return prevData;

      let newBoardLists = [...(prevData.boardLists || [])];

      // 1. –õ–û–ì–ò–ö–ê –î–û–ë–ê–í–õ–ï–ù–ò–Ø –ù–û–í–û–ô –ö–û–õ–û–ù–ö–ò
      if (newData.newCard) {
        const listIdFromServer =
          newData.newCard.CardId || newData.newCard.cardId;

        const normalizedNewList = {
          listId: String(listIdFromServer || generateUniqueId("list")),
          listName:
            newData.newCard.CardName ||
            newData.newCard.cardName ||
            "–ù–æ–≤–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞",
          ...newData.newCard,
          cards: newData.newCard.cards || newData.newCard.tasks || [],
        };

        if (!normalizedNewList.listId) {
          console.error(
            "–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –¥–ª—è –Ω–æ–≤–æ–π –∫–æ–ª–æ–Ω–∫–∏. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ."
          );
          return prevData;
        }

        const finalLists = [...newBoardLists, normalizedNewList];

        console.log(
          "‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è –ö–æ–ª–æ–Ω–∫–∞/–°–ø–∏—Å–æ–∫ ('–ö–∞—Ä—Ç–æ—á–∫–∞'):",
          normalizedNewList
        );

        return {
          ...prevData,
          boardLists: finalLists,
        };
      }

      // 2. –õ–û–ì–ò–ö–ê –î–û–ë–ê–í–õ–ï–ù–ò–Ø –ù–û–í–û–ô –ó–ê–î–ê–ß–ò
      if (newData.newTask && newData.listId) {
        const { newTask, listId } = newData;

        const targetListIndex = newBoardLists.findIndex(
          (l) => l.listId === listId
        );

        if (targetListIndex === -1) {
          console.error(
            `–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–ø–∏—Å–æ–∫ —Å ID: ${listId} –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏.`
          );
          return prevData;
        }

        const taskIdFromServer =
          newData.newTask.cardId || newData.newTask.CardId;

        if (!taskIdFromServer || isNaN(parseInt(taskIdFromServer))) {
          console.error(
            "–û—à–∏–±–∫–∞: –°–µ—Ä–≤–µ—Ä –Ω–µ –≤–µ—Ä–Ω—É–ª –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–∏—Å–ª–æ–≤–æ–π ID –¥–ª—è –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏. –¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±—ç–∫–µ–Ω–¥–∞."
          );
          return prevData;
        }

        const normalizedNewTask = {
          cardId: String(taskIdFromServer),
          cardName:
            newData.newTask.CardName ||
            newData.newTask.cardName ||
            "–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞",
          ...newData.newTask,
          subTasks: newData.newTask.subTasks || [],
        };

        if (!normalizedNewTask.cardId) {
          console.error(
            "–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –¥–ª—è –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ."
          );
          return prevData;
        }

        const targetList = newBoardLists[targetListIndex];

        const updatedList = {
          ...targetList,
          cards: [...(targetList.cards || []), normalizedNewTask],
        };

        const finalLists = [
          ...newBoardLists.slice(0, targetListIndex),
          updatedList,
          ...newBoardLists.slice(targetListIndex + 1),
        ];

        console.log(
          `‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –≤ —Å–ø–∏—Å–æ–∫ ${listId}:`,
          normalizedNewTask
        );

        return {
          ...prevData,
          boardLists: finalLists,
        };
      }

      // 3. –õ–û–ì–ò–ö–ê –î–û–ë–ê–í–õ–ï–ù–ò–Ø –ù–û–í–û–ô –ü–û–î–ó–ê–î–ê–ß–ò
      if (newData.newSubTask && newData.taskId) {
        const { newSubTask, taskId } = newData;

        let targetListIndex = -1;
        let targetCardIndex = -1;

        for (let i = 0; i < newBoardLists.length; i++) {
          targetCardIndex = newBoardLists[i].cards.findIndex(
            (c) => String(c.cardId) === String(taskId)
          );
          if (targetCardIndex !== -1) {
            targetListIndex = i;
            break;
          }
        }

        if (targetListIndex === -1) {
          console.error(
            `–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∑–∞–¥–∞—á—É —Å ID: ${taskId} –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–∑–∞–¥–∞—á–∏.`
          );
          return prevData;
        }

        const subTaskIdFromServer =
          newSubTask.subTaskId || newSubTask.SubTaskId;

        const normalizedNewSubTask = {
          subTaskId: String(subTaskIdFromServer || generateUniqueId("subtask")),
          subTaskName:
            newSubTask.SubTaskName ||
            newSubTask.subTaskName ||
            "–ù–æ–≤–∞—è –ø–æ–¥–∑–∞–¥–∞—á–∞",
          isCompleted: newSubTask.isCompleted || false,
          ...newSubTask,
        };

        if (!normalizedNewSubTask.subTaskId) {
          console.error(
            "–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –¥–ª—è –Ω–æ–≤–æ–π –ø–æ–¥–∑–∞–¥–∞—á–∏. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ."
          );
          return prevData;
        }

        const targetList = newBoardLists[targetListIndex];
        const targetCard = targetList.cards[targetCardIndex];

        const updatedSubTasks = [
          ...(targetCard.subTasks || []),
          normalizedNewSubTask,
        ];

        const updatedCard = {
          ...targetCard,
          subTasks: updatedSubTasks,
        };

        const updatedCards = [
          ...targetList.cards.slice(0, targetCardIndex),
          updatedCard,
          ...targetList.cards.slice(targetCardIndex + 1),
        ];

        const updatedList = {
          ...targetList,
          cards: updatedCards,
        };

        const finalLists = [
          ...newBoardLists.slice(0, targetListIndex),
          updatedList,
          ...newBoardLists.slice(targetListIndex + 1),
        ];

        console.log(
          `‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è –ø–æ–¥–∑–∞–¥–∞—á–∞ –≤ –∑–∞–¥–∞—á—É ${taskId}:`,
          normalizedNewSubTask
        );

        return {
          ...prevData,
          boardLists: finalLists,
        };
      }

      return { ...prevData, ...newData };
    });
  }, []);

  // ----------------------------------------------------------------------
  // –§–£–ù–ö–¶–ò–ò –ó–ê–ì–†–£–ó–ö–ò –ò –ò–ó–í–õ–ï–ß–ï–ù–ò–Ø –î–ê–ù–ù–´–•
  // ----------------------------------------------------------------------

  const fetchWorkspaceData = useCallback(
    async (id) => {
      if (!id) return;
      setLoading(true);
      try {
        const data = await fetchWithAuth(`/GetPages/GetWorkSpacePage/${id}`);
        const normalizedData = normalizeWorkspaceData(data);

        setWorkspaceData(normalizedData);

        console.log(
          "–î–∞–Ω–Ω—ã–µ —Ä–∞–±–æ—á–µ–π –æ–±–ª–∞—Å—Ç–∏ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω—ã:",
          normalizedData
        );
      } catch (err) {
        console.error(
          "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö WorkSpace:",
          err.response || err.message
        );
        showToast(
          "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞–±–æ—á—É—é –æ–±–ª–∞—Å—Ç—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
          "error"
        );
      } finally {
        setLoading(false);
      }
    },
    [showToast]
  );

  useEffect(() => {
    fetchWorkspaceData(boardId);
  }, [boardId, fetchWorkspaceData]);

  const projectIdFromApi = workspaceData?.projectId;
  const projectId = projectIdFromApi || incomingProjectId;
  const projectNameFromApi = workspaceData?.projectName;
  const projectName =
    projectNameFromApi || incomingProjectName || "–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞...";
  const boardName = workspaceData?.boardName || "–ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ—Å–∫–∏...";
  const members = workspaceData?.members || [];
  const lists = workspaceData?.boardLists || [];

  // üîë –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –ü–ï–†–ï–ö–õ–Æ–ß–ï–ù–ò–Ø –°–¢–ê–¢–£–°–ê –ü–û–î–ó–ê–î–ê–ß–ò
  const toggleSubTaskStatus = useCallback(async (subTaskId, isCompleted) => {
    if (!projectId || !boardId) {
      console.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç Project ID –∏–ª–∏ Board ID.", { projectId, boardId });
      return false;
    }

    try {
      // –û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI
      setWorkspaceData(prevData => {
        if (!prevData?.boardLists) return prevData;
        
        return {
          ...prevData,
          boardLists: prevData.boardLists.map(list => ({
            ...list,
            cards: list.cards.map(card => ({
              ...card,
              subTasks: card.subTasks.map(subTask => 
                subTask.subTaskId === subTaskId 
                  ? { ...subTask, isCompleted }
                  : subTask
              )
            }))
          }))
        };
      });

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä
      const url = `/project/${projectId}/board/${boardId}/Task/UpdateSubTaskStatus/${subTaskId}`;
      
      const response = await patchWithAuth(url, { isCompleted });

      showToast("–°—Ç–∞—Ç—É—Å –ø–æ–¥–∑–∞–¥–∞—á–∏ –æ–±–Ω–æ–≤–ª–µ–Ω!", "success");
      return true;
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∑–∞–¥–∞—á–∏:", err);
      
      // –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏ –æ—à–∏–±–∫–µ
      setWorkspaceData(prevData => {
        if (!prevData?.boardLists) return prevData;
        
        return {
          ...prevData,
          boardLists: prevData.boardLists.map(list => ({
            ...list,
            cards: list.cards.map(card => ({
              ...card,
              subTasks: card.subTasks.map(subTask => 
                subTask.subTaskId === subTaskId 
                  ? { ...subTask, isCompleted: !isCompleted }
                  : subTask
              )
            }))
          }))
        };
      });
      
      showToast("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∑–∞–¥–∞—á–∏", "error");
      return false;
    }
  }, [projectId, boardId, showToast]);

  // ----------------------------------------------------------------------
  // –§–£–ù–ö–¶–ò–ò API –î–õ–Ø –°–û–ó–î–ê–ù–ò–Ø
  // ----------------------------------------------------------------------

  const createCard = useCallback(async () => {
    if (!projectId || !boardId) {
      console.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç Project ID –∏–ª–∏ Board ID.");
      showToast(
        "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ (–∫–æ–ª–æ–Ω–∫–∏).",
        "error"
      );
      return;
    }

    const url = `/project/${projectId}/board/${boardId}/Card/CreateCard`;

    const payload = {
      CardName: "–ù–æ–≤–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞",
    };

    try {
      const newCard = await postWithAuth(url, payload, {
        headers: { "Content-Type": "application/json" },
      });

      showToast("–ù–æ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!", "success");

      updateWorkspaceData({ newCard: newCard });

      return newCard;
    } catch (err) {
      console.error(
        "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ (–∫–æ–ª–æ–Ω–∫–∏):",
        err.response || err.message
      );
      showToast(
        "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ (–∫–æ–ª–æ–Ω–∫–∏). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
        "error"
      );
      throw err;
    }
  }, [projectId, boardId, showToast, updateWorkspaceData]);

  const createTask = useCallback(
    async (listId, taskName = "–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞") => {
      if (!projectId || !boardId || !listId) {
        console.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç Project ID, Board ID –∏–ª–∏ List ID.", {
          projectId,
          boardId,
          listId,
        });
        showToast("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏.", "error");
        return;
      }

      const baseUrl = `/project/${projectId}/board/${boardId}/Task/CreateTask?cardId=${listId}`;
      const payload = {};

      try {
        const newTask = await postWithAuth(baseUrl, payload, {
          headers: { "Content-Type": "application/json" },
        });

        console.log("–ø—Ä–æ–≤–µ—Ä–∫–∞ ", newTask);

        const taskIdFromServer = newTask?.taskId;

        if (!taskIdFromServer || isNaN(parseInt(taskIdFromServer))) {
          throw new Error(
            "–°–µ—Ä–≤–µ—Ä –Ω–µ –≤–µ—Ä–Ω—É–ª –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–∏—Å–ª–æ–≤–æ–π ID –¥–ª—è –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏."
          );
        }

        const numericIdString = String(taskIdFromServer);

        showToast("–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!", "success");

        updateWorkspaceData({
          newTask: { ...newTask, cardId: numericIdString },
          listId: listId,
        });

        return { ...newTask, cardId: numericIdString };
      } catch (err) {
        console.error(
          "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏:",
          err.response || err.message
        );
        showToast(
          "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å.",
          "error"
        );
        throw err;
      }
    },
    [projectId, boardId, showToast, updateWorkspaceData]
  );

  const createSubTask = useCallback(
    async (taskId, subTaskName = "–ù–æ–≤–∞—è –ø–æ–¥–∑–∞–¥–∞—á–∞") => {
      console.log(
        `üöÄ [SubTask] –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å –ø–æ–¥–∑–∞–¥–∞—á—É. Task ID (–∏—Å—Ö–æ–¥–Ω—ã–π): ${taskId}`
      );

      if (!projectId || !boardId || !taskId) {
        console.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç Project ID, Board ID –∏–ª–∏ Task ID.");
        showToast("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–∑–∞–¥–∞—á–∏.", "error");
        return;
      }

      const numericTaskId = parseInt(taskId);

      console.log(`üöÄ [SubTask] Task ID –ø–æ—Å–ª–µ parseInt: ${numericTaskId}`);

      if (isNaN(numericTaskId) || numericTaskId <= 0) {
        console.error(
          `‚ùå [SubTask] –ë–õ–û–ö–ò–†–û–í–ö–ê: Task ID –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–≤—ã–º: ${taskId}. –û—Ç–º–µ–Ω–∞ API-–≤—ã–∑–æ–≤–∞.`
        );
        showToast(
          "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ–¥–∑–∞–¥–∞—á—É: –°–Ω–∞—á–∞–ª–∞ –¥–æ–∂–¥–∏—Ç–µ—Å—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.",
          "error"
        );
        return;
      }

      console.log(
        `‚úÖ [SubTask] Task ID –ø—Ä–æ—à–µ–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é: ${numericTaskId}. –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è API-–≤—ã–∑–æ–≤.`
      );

      const url = `/project/${projectId}/board/${boardId}/Task/CreateSubTask?taskId=${numericTaskId}`;

      const payload = {
        SubTaskName: subTaskName,
      };

      try {
        const newSubTask = await postWithAuth(url, payload, {
          headers: { "Content-Type": "application/json" },
        });

        showToast("–ù–æ–≤–∞—è –ø–æ–¥–∑–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!", "success");

        updateWorkspaceData({ newSubTask: newSubTask, taskId: taskId });

        return newSubTask;
      } catch (err) {
        throw err;
      }
    },
    [projectId, boardId, showToast, updateWorkspaceData]
  );

  // ----------------------------------------------------------------------
  // üîë –§–£–ù–ö–¶–ò–Ø API: PATCH –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π –∑–∞–¥–∞—á/–∫–æ–ª–æ–Ω–æ–∫
  // ----------------------------------------------------------------------

  const updateCardNames = useCallback(
    async (cardsToUpdate) => {
      if (!projectId || !boardId || cardsToUpdate.length === 0) {
        console.error(
          "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç Project ID, Board ID –∏–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è."
        );
        return false;
      }

      const url = `/project/${projectId}/board/${boardId}/Card/ChangeCardsNames`;

      const cardArray = cardsToUpdate.map((item) => ({
        cardId: parseInt(item.id),
        cardName: item.name,
      }));

      const validCardArray = cardArray.filter(
        (item) => !isNaN(item.cardId) && item.cardId > 0
      );

      if (validCardArray.length === 0) {
        console.log("–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ PATCH-–∑–∞–ø—Ä–æ—Å–∞.");
        return true;
      }

      const finalPayload = {
        cards: validCardArray,
      };

      try {
        await patchWithAuth(url, finalPayload);

        setWorkspaceData((prevData) => {
          if (!prevData || !prevData.boardLists) return prevData;

          const updatesMap = new Map(
            cardsToUpdate.map((card) => [String(card.id), card.name])
          );

          const newBoardLists = prevData.boardLists.map((list) => {
            const listId = String(list.listId);
            let isListUpdated = false;
            let updatedCards = list.cards;

            if (updatesMap.has(listId)) {
              isListUpdated = true;
              list = { ...list, listName: updatesMap.get(listId) };
            }

            updatedCards = list.cards.map((card) => {
              const cardId = String(card.cardId);
              if (updatesMap.has(cardId)) {
                isListUpdated = true;
                return { ...card, cardName: updatesMap.get(cardId) };
              }
              return card;
            });

            if (isListUpdated) {
              return { ...list, cards: updatedCards };
            }
            return list;
          });

          return { ...prevData, boardLists: newBoardLists };
        });

        showToast("–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏(–æ–∫) —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ!", "success");
        return true;
      } catch (err) {
        console.error(
          "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏–π (PATCH):",
          err.response || err.message
        );
        showToast("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π.", "error");
        return false;
      }
    },
    [projectId, boardId, showToast]
  );

  // ----------------------------------------------------------------------
  // –ö–û–ù–¢–ï–ö–°–¢
  // ----------------------------------------------------------------------

  const contextValue = {
    workspaceData,
    loading,
    projectName,
    boardName,
    members,
    projectId,
    boardId,
    createCard,
    createTask,
    createSubTask,
    fetchWorkspaceData,
    lists,
    updateCardNames,
    toggleSubTaskStatus,
  };

  return (
    <WorkspaceContext.Provider value={contextValue}>
      {children}
    </WorkspaceContext.Provider>
  );
};